/*1.Проанализировать какие запросы могут выполняться наиболее
-- часто в процессе работы приложения и добавить необходимые индексы.*/

SELECT posts_like.*
FROM users;
CREATE INDEX inx_from_to_posts_like ON users (from_user_id, to_user_id);

/*2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы:
-- имя группы +
-- среднее количество пользователей в группах +
-- самый молодой пользователь в группе +
-- самый старший пользователь в группе +
-- общее количество пользователей в группе +
-- всего пользователей в системе+
-- отношение в процентах (общее количество пользователей в группе / всего пользователей в системе) * 100  */

SELECT DISTINCT
	communities.name AS group.name,
	COUNT(communities_users.user_id) OVER()
	/ (SELECT COUNT(*) FROM communities) AS avg_users_in_groups,
	FIRST_VALUE(CONCAT_WS(" ", users.first_name, users.last_name)) OVER w_community_birthday_desc AS youngest,
	FIRST_VALUE(CONCAT_WS(" ", users.first_name, users.last_name)) OVER w_community_birthday_asc AS oldest,
	COUNT(communities_users.user_id) OVER w_community AS users_in_group,
	(SELECT COUNT(*) FROM users) AS users_total,
	COUNT(communities_users.user_id) OVER w_community / (SELECT COUNT(*) FROM users) *100 AS '%%'
FROM communities
LEFT JOIN communities_users
    ON communities_users.communities_id = communities.id
LEFT JOIN users
    ON communities_users.user_id = users.id
LEFT JOIN profiles
    ON profiles.user_id = users.id
WINDOW w_community AS (PARITION BY communities.id),
	w_community_birthday_desc AS (PARITION BY communities.id ORDER BY profiles.birthday DESC),
	w_community_birthday_asc AS (PARITION BY communities.id ORDER BY profiles.birthday);





